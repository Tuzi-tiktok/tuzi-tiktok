// Code generated by Kitex v0.6.2. DO NOT EDIT.

package commentservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	comment "tuzi-tiktok/kitex/kitex_gen/comment"
)

func serviceInfo() *kitex.ServiceInfo {
	return commentServiceServiceInfo
}

var commentServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CommentService"
	handlerType := (*comment.CommentService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Comment":        kitex.NewMethodInfo(commentHandler, newCommentArgs, newCommentResult, false),
		"GetCommentList": kitex.NewMethodInfo(getCommentListHandler, newGetCommentListArgs, newGetCommentListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "idl",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func commentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.CommentRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).Comment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CommentArgs:
		success, err := handler.(comment.CommentService).Comment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CommentResult)
		realResult.Success = success
	}
	return nil
}
func newCommentArgs() interface{} {
	return &CommentArgs{}
}

func newCommentResult() interface{} {
	return &CommentResult{}
}

type CommentArgs struct {
	Req *comment.CommentRequest
}

func (p *CommentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.CommentRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CommentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CommentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CommentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CommentArgs) Unmarshal(in []byte) error {
	msg := new(comment.CommentRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CommentArgs_Req_DEFAULT *comment.CommentRequest

func (p *CommentArgs) GetReq() *comment.CommentRequest {
	if !p.IsSetReq() {
		return CommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CommentResult struct {
	Success *comment.CommentResponse
}

var CommentResult_Success_DEFAULT *comment.CommentResponse

func (p *CommentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.CommentResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CommentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CommentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CommentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CommentResult) Unmarshal(in []byte) error {
	msg := new(comment.CommentResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CommentResult) GetSuccess() *comment.CommentResponse {
	if !p.IsSetSuccess() {
		return CommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.CommentResponse)
}

func (p *CommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommentResult) GetResult() interface{} {
	return p.Success
}

func getCommentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.CommentListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).GetCommentList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetCommentListArgs:
		success, err := handler.(comment.CommentService).GetCommentList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetCommentListResult)
		realResult.Success = success
	}
	return nil
}
func newGetCommentListArgs() interface{} {
	return &GetCommentListArgs{}
}

func newGetCommentListResult() interface{} {
	return &GetCommentListResult{}
}

type GetCommentListArgs struct {
	Req *comment.CommentListRequest
}

func (p *GetCommentListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.CommentListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetCommentListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetCommentListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetCommentListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetCommentListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetCommentListArgs) Unmarshal(in []byte) error {
	msg := new(comment.CommentListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetCommentListArgs_Req_DEFAULT *comment.CommentListRequest

func (p *GetCommentListArgs) GetReq() *comment.CommentListRequest {
	if !p.IsSetReq() {
		return GetCommentListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetCommentListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetCommentListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetCommentListResult struct {
	Success *comment.CommentListResponse
}

var GetCommentListResult_Success_DEFAULT *comment.CommentListResponse

func (p *GetCommentListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.CommentListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetCommentListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetCommentListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetCommentListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetCommentListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetCommentListResult) Unmarshal(in []byte) error {
	msg := new(comment.CommentListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetCommentListResult) GetSuccess() *comment.CommentListResponse {
	if !p.IsSetSuccess() {
		return GetCommentListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetCommentListResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.CommentListResponse)
}

func (p *GetCommentListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCommentListResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Comment(ctx context.Context, Req *comment.CommentRequest) (r *comment.CommentResponse, err error) {
	var _args CommentArgs
	_args.Req = Req
	var _result CommentResult
	if err = p.c.Call(ctx, "Comment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCommentList(ctx context.Context, Req *comment.CommentListRequest) (r *comment.CommentListResponse, err error) {
	var _args GetCommentListArgs
	_args.Req = Req
	var _result GetCommentListResult
	if err = p.c.Call(ctx, "GetCommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
