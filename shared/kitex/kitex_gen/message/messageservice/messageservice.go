// Code generated by Kitex v0.6.2. DO NOT EDIT.

package messageservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	message "tuzi-tiktok/kitex/kitex_gen/message"
)

func serviceInfo() *kitex.ServiceInfo {
	return messageServiceServiceInfo
}

var messageServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MessageService"
	handlerType := (*message.MessageService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetMessageList": kitex.NewMethodInfo(getMessageListHandler, newGetMessageListArgs, newGetMessageListResult, false),
		"MessageAction":  kitex.NewMethodInfo(messageActionHandler, newMessageActionArgs, newMessageActionResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "idl",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func getMessageListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(message.MessageChatRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(message.MessageService).GetMessageList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetMessageListArgs:
		success, err := handler.(message.MessageService).GetMessageList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetMessageListResult)
		realResult.Success = success
	}
	return nil
}
func newGetMessageListArgs() interface{} {
	return &GetMessageListArgs{}
}

func newGetMessageListResult() interface{} {
	return &GetMessageListResult{}
}

type GetMessageListArgs struct {
	Req *message.MessageChatRequest
}

func (p *GetMessageListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(message.MessageChatRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetMessageListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetMessageListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetMessageListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetMessageListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetMessageListArgs) Unmarshal(in []byte) error {
	msg := new(message.MessageChatRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetMessageListArgs_Req_DEFAULT *message.MessageChatRequest

func (p *GetMessageListArgs) GetReq() *message.MessageChatRequest {
	if !p.IsSetReq() {
		return GetMessageListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetMessageListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetMessageListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetMessageListResult struct {
	Success *message.MessageChatResponse
}

var GetMessageListResult_Success_DEFAULT *message.MessageChatResponse

func (p *GetMessageListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(message.MessageChatResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetMessageListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetMessageListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetMessageListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetMessageListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetMessageListResult) Unmarshal(in []byte) error {
	msg := new(message.MessageChatResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetMessageListResult) GetSuccess() *message.MessageChatResponse {
	if !p.IsSetSuccess() {
		return GetMessageListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetMessageListResult) SetSuccess(x interface{}) {
	p.Success = x.(*message.MessageChatResponse)
}

func (p *GetMessageListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMessageListResult) GetResult() interface{} {
	return p.Success
}

func messageActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(message.MessageActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(message.MessageService).MessageAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *MessageActionArgs:
		success, err := handler.(message.MessageService).MessageAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MessageActionResult)
		realResult.Success = success
	}
	return nil
}
func newMessageActionArgs() interface{} {
	return &MessageActionArgs{}
}

func newMessageActionResult() interface{} {
	return &MessageActionResult{}
}

type MessageActionArgs struct {
	Req *message.MessageActionRequest
}

func (p *MessageActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(message.MessageActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MessageActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MessageActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MessageActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in MessageActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *MessageActionArgs) Unmarshal(in []byte) error {
	msg := new(message.MessageActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MessageActionArgs_Req_DEFAULT *message.MessageActionRequest

func (p *MessageActionArgs) GetReq() *message.MessageActionRequest {
	if !p.IsSetReq() {
		return MessageActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MessageActionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MessageActionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MessageActionResult struct {
	Success *message.MessageActionResponse
}

var MessageActionResult_Success_DEFAULT *message.MessageActionResponse

func (p *MessageActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(message.MessageActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MessageActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MessageActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MessageActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in MessageActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *MessageActionResult) Unmarshal(in []byte) error {
	msg := new(message.MessageActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MessageActionResult) GetSuccess() *message.MessageActionResponse {
	if !p.IsSetSuccess() {
		return MessageActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MessageActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*message.MessageActionResponse)
}

func (p *MessageActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MessageActionResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetMessageList(ctx context.Context, Req *message.MessageChatRequest) (r *message.MessageChatResponse, err error) {
	var _args GetMessageListArgs
	_args.Req = Req
	var _result GetMessageListResult
	if err = p.c.Call(ctx, "GetMessageList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MessageAction(ctx context.Context, Req *message.MessageActionRequest) (r *message.MessageActionResponse, err error) {
	var _args MessageActionArgs
	_args.Req = Req
	var _result MessageActionResult
	if err = p.c.Call(ctx, "MessageAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
