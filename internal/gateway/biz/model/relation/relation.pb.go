// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v4.24.0--rc2
// source: relation.proto

package relation

import (
	auth "tuzi-tiktok/gateway/biz/model/auth"
)

type RelationRequest struct {
	Token      string `json:"token,omitempty" form:"token" query:"token"`                   // 用户鉴权token
	ToUserId   int64  `json:"to_user_id,omitempty" form:"to_user_id" query:"to_user_id"`    // 对方用户id
	ActionType int32  `json:"action_type,omitempty" form:"action_type" query:"action_type"` // 1-关注，2-取消关注
}

type RelationResponse struct {
	StatusCode int32   `json:"status_code,omitempty" form:"status_code" query:"status_code"` // 状态码，0-成功，其他值-失败
	StatusMsg  *string `json:"status_msg,omitempty" form:"status_msg" query:"status_msg"`    // 返回状态描述
}

type RelationFollowListRequest struct {
	UserId int64  `json:"user_id,omitempty" form:"user_id" query:"user_id"` // 用户id
	Token  string `json:"token,omitempty" form:"token" query:"token"`       // 用户鉴权token
}

type RelationFollowListResponse struct {
	StatusCode int32        `json:"status_code,omitempty" form:"status_code" query:"status_code"` // 状态码，0-成功，其他值-失败
	StatusMsg  *string      `json:"status_msg,omitempty" form:"status_msg" query:"status_msg"`    // 返回状态描述
	UserList   []*auth.User `json:"user_list,omitempty" form:"user_list" query:"user_list"`       // 用户信息列表
}

type RelationFollowerListRequest struct {
	UserId int64  `json:"user_id,omitempty" form:"user_id" query:"user_id"` // 用户id
	Token  string `json:"token,omitempty" form:"token" query:"token"`       // 用户鉴权token
}

type RelationFollowerListResponse struct {
	StatusCode int32        `json:"status_code,omitempty" form:"status_code" query:"status_code"` // 状态码，0-成功，其他值-失败
	StatusMsg  *string      `json:"status_msg,omitempty" form:"status_msg" query:"status_msg"`    // 返回状态描述
	UserList   []*auth.User `json:"user_list,omitempty" form:"user_list" query:"user_list"`       // 用户列表
}

type RelationFriendListRequest struct {
	UserId int64  `json:"user_id,omitempty" form:"user_id" query:"user_id"` // 用户id
	Token  string `json:"token,omitempty" form:"token" query:"token"`       // 用户鉴权token
}

type RelationFriendListResponse struct {
	StatusCode int32         `json:"status_code,omitempty" form:"status_code" query:"status_code"` // 状态码，0-成功，其他值-失败
	StatusMsg  *string       `json:"status_msg,omitempty" form:"status_msg" query:"status_msg"`    // 返回状态描述
	UserList   []*FriendUser `json:"user_list,omitempty" form:"user_list" query:"user_list"`       // 用户列表
}

type FriendUser struct {
	Id              int64   `json:"id,omitempty" form:"id" query:"id"`                                           // 用户id
	Name            string  `json:"name,omitempty" form:"name" query:"name"`                                     // 用户名称
	FollowCount     *int64  `json:"follow_count,omitempty" form:"follow_count" query:"follow_count"`             // 关注总数
	FollowerCount   *int64  `json:"follower_count,omitempty" form:"follower_count" query:"follower_count"`       // 粉丝总数
	IsFollow        bool    `json:"is_follow,omitempty" form:"is_follow" query:"is_follow"`                      // true-已关注，false-未关注
	Avatar          *string `json:"avatar,omitempty" form:"avatar" query:"avatar"`                               //用户头像
	BackgroundImage *string `json:"background_image,omitempty" form:"background_image" query:"background_image"` //用户个人页顶部大图
	Signature       *string `json:"signature,omitempty" form:"signature" query:"signature"`                      //个人简介
	TotalFavorited  *int64  `json:"total_favorited,omitempty" form:"total_favorited" query:"total_favorited"`    //获赞数量
	WorkCount       *int64  `json:"work_count,omitempty" form:"work_count" query:"work_count"`                   //作品数量
	FavoriteCount   *int64  `json:"favorite_count,omitempty" form:"favorite_count" query:"favorite_count"`       //点赞数量
	Message         *string `json:"message,omitempty" form:"message" query:"message"`                            // 和该好友的最新聊天消息
	MsgType         int64   `json:"msgType,omitempty" form:"msgType" query:"msgType"`                            // message消息的类型，0 => 当前请求用户接收的消息， 1 => 当前请求用户发送的消息
}
