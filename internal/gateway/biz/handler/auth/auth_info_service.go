// Code generated by hertz generator.

package auth

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"log"
	auth "tuzi-tiktok/gateway/biz/model/auth"
	rpcAuth "tuzi-tiktok/kitex/kitex_gen/auth"
	"tuzi-tiktok/kitex/kitex_gen/auth/authinfoservice"
	"tuzi-tiktok/utils"
)

var authClient authinfoservice.Client

func init() {
	var err error
	//authClient, err = authinfoservice.NewClient("auth-service", client.WithHostPorts("127.0.0.1:8888"))
	authClient, err = utils.NewAuth()
	if err != nil {
		log.Fatal(err)
	}
}

// Login .
// @router /douyin/user/login/ [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req auth.UserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	loginResp, err := authClient.Login(ctx, &rpcAuth.UserLoginRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		c.String(consts.StatusServiceUnavailable, err.Error())
		return
	}
	resp := new(auth.UserLoginResponse)
	resp.StatusCode = loginResp.GetStatusCode()
	msg := loginResp.GetStatusMsg()
	resp.StatusMsg = &msg
	resp.UserId = loginResp.GetUserId()
	resp.Token = loginResp.GetToken()

	c.JSON(consts.StatusOK, resp)
}

// Register .
// @router /douyin/user/register/ [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req auth.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	registerResp, err := authClient.Register(ctx, &rpcAuth.UserRegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		c.String(consts.StatusServiceUnavailable, err.Error())
		return
	}

	resp := new(auth.UserRegisterResponse)
	resp.StatusCode = registerResp.GetStatusCode()
	msg := registerResp.GetStatusMsg()
	resp.StatusMsg = &msg
	resp.UserId = registerResp.GetUserId()
	resp.Token = registerResp.GetToken()

	c.JSON(consts.StatusOK, resp)
}

// GetUserInfo .
// @router /douyin/user/ [GET]
func GetUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req auth.UserInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	userInfoResp, err := authClient.GetUserInfo(ctx, &rpcAuth.UserInfoRequest{
		UserId: req.UserId,
		Token:  req.Token,
	})
	if err != nil {
		c.String(consts.StatusServiceUnavailable, err.Error())
		return
	}

	resp := new(auth.UserInfoResponse)
	resp.StatusCode = userInfoResp.GetStatusCode()
	msg := userInfoResp.GetStatusMsg()
	resp.StatusMsg = &msg
	u := userInfoResp.GetUser()
	resp.User = &auth.User{
		Id:              u.Id,
		Name:            u.Name,
		FollowCount:     u.FollowCount,
		FollowerCount:   u.FollowerCount,
		IsFollow:        u.IsFollow,
		Avatar:          u.Avatar,
		BackgroundImage: u.BackgroundImage,
		Signature:       u.Signature,
		TotalFavorited:  u.TotalFavorited,
		WorkCount:       u.WorkCount,
		FavoriteCount:   u.FavoriteCount,
	}

	c.JSON(consts.StatusOK, resp)
}
