// Code generated by hertz generator.

package publish

import (
	"context"
	"errors"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"mime/multipart"
	"tuzi-tiktok/gateway/biz/err/global"
	"tuzi-tiktok/gateway/biz/model/publish"
	"tuzi-tiktok/gateway/biz/service"
	kpublish "tuzi-tiktok/kitex/kitex_gen/publish"
	"tuzi-tiktok/utils/mapstruct"
)

// PublishVideo .
// @router /douyin/publish/action/ [POST]
func PublishVideo(ctx context.Context, c *app.RequestContext) {
	var req publish.PublishRequest
	err := c.Bind(&req)
	var handler = "PublishVideo"
	if err != nil {
		_ = c.Error(global.RequestParameterBindError.WithHandler(handler).WithWarn(err))
		return
	}
	form, err := c.MultipartForm()
	if err != nil || len(form.File) == 0 || len(form.File["data"]) == 0 {
		_ = c.Error(global.MultipartFormError.WithHandler(handler).WithWarn(err))
		return
	}
	video := form.File["data"][0]
	file, err := video.Open()
	if err != nil {
		_ = c.Error(global.MultipartFileOpenError.WithHandler(handler).WithWarn(err))
		return
	}
	defer func(file multipart.File) {
		err := file.Close()
		if err != nil {
			_ = c.Error(global.MultipartFileCloseError.WithHandler(handler).WithError(err))
		}
	}(file)

	r := service.ServiceSet.Transfer.Put(video.Filename, file)
	if !r.Ok {
		_ = c.Error(global.RPCClientCallError.WithHandler(handler).WithError(errors.New("Transfer error occurred ")))
		return
	}

	R, err := service.ServiceSet.Publish.PublishVideo(ctx, &kpublish.PublishRequest{
		Title:    req.Title,
		Token:    req.Token,
		VideoUrl: r.Url,
	})
	if err != nil {
		_ = c.Error(global.RPCClientCallError.WithHandler(handler).WithError(err))
		return
	}
	resp := mapstruct.ToPublishResponse(R)
	c.JSON(consts.StatusOK, resp)

}

// GetPublishList .
// @router /douyin/publish/list/ [GET]
func GetPublishList(ctx context.Context, c *app.RequestContext) {
	var req publish.PublishListRequest
	var handler = "GetPublishList"
	err := c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	r, err := service.ServiceSet.Publish.GetPublishList(ctx, &kpublish.PublishListRequest{
		Token:  req.Token,
		UserId: req.UserId,
	})
	if err != nil {
		_ = c.Error(global.RPCClientCallError.WithHandler(handler).WithError(err))
		return
	}
	resp := mapstruct.ToPublishListResponse(r)
	c.JSON(consts.StatusOK, &resp)
}
