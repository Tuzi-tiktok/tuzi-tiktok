// Code generated by hertz generator.

package publish

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"net/http"
	publish "tuzi-tiktok/gateway/biz/model/publish"
	kpublish "tuzi-tiktok/kitex/kitex_gen/publish"
	"tuzi-tiktok/kitex/kitex_gen/publish/publishservice"
	"tuzi-tiktok/logger"
	"tuzi-tiktok/service/filetransfer/client"
	"tuzi-tiktok/utils"
	"tuzi-tiktok/utils/mapstruct"
)

var (
	transfer client.Transfer
	pClient  publishservice.Client
)

func init() {
	var err error
	transfer = client.NewTransfer()
	pClient, err = utils.NewPublish()
	if err != nil {
		panic(err)
	}
}

// PublishVideo .
// @router /douyin/publish/action/ [POST]
func PublishVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req publish.PublishRequest
	err = c.Bind(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	form, err := c.MultipartForm()
	if err != nil || len(form.File) == 0 || len(form.File["data"]) == 0 {
		logger.Error("MultipartForm Occurrence Error")
		c.String(http.StatusBadRequest, err.Error())
		return
	}
	video := form.File["data"][0]
	file, err := video.Open()
	if err != nil {
		return
	}
	defer file.Close()
	r := transfer.Put(video.Filename, file)
	if !r.Ok {
		logger.Error("Error RPC Call")
		c.Status(http.StatusBadRequest)
		return
	}

	rp := &kpublish.PublishRequest{
		Title:    req.Title,
		Token:    req.Token,
		VideoUrl: r.Url,
	}
	rpcResp, err := pClient.PublishVideo(ctx, rp)
	if err != nil {
		logger.Error(err)
		c.String(http.StatusBadRequest, err.Error())
		return
	}
	resp := publish.PublishResponse{
		StatusCode: rpcResp.StatusCode,
		StatusMsg:  rpcResp.StatusMsg,
	}
	c.JSON(consts.StatusOK, resp)

}

// GetPublishList .
// @router /douyin/publish/list/ [GET]
func GetPublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req publish.PublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	r, err := pClient.GetPublishList(ctx, &kpublish.PublishListRequest{
		Token:  req.Token,
		UserId: req.UserId,
	})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := mapstruct.ToPublishListResponse(r)
	//videoList := make([]*feed.Video, len(r.VideoList))
	//for i := range videoList {
	//	video := r.VideoList[i]
	//	videoList[i] = &feed.Video{
	//		Id:            video.Id,
	//		Title:         video.Title,
	//		PlayUrl:       video.PlayUrl,
	//		CoverUrl:      video.CoverUrl,
	//		CommentCount:  video.CommentCount,
	//		FavoriteCount: video.FavoriteCount,
	//		IsFavorite:    video.IsFavorite,
	//		Author: &auth.User{
	//			Id:              video.Author.Id,
	//			Name:            video.Author.Name,
	//			FollowCount:     video.Author.FollowCount,
	//			FollowerCount:   video.Author.FollowerCount,
	//			IsFollow:        video.Author.IsFollow,
	//			Avatar:          video.Author.Avatar,
	//			BackgroundImage: video.Author.BackgroundImage,
	//			Signature:       video.Author.Signature,
	//			TotalFavorited:  video.Author.TotalFavorited,
	//			WorkCount:       video.Author.WorkCount,
	//			FavoriteCount:   video.Author.FavoriteCount,
	//		},
	//	}
	//}
	//resp := publish.PublishListResponse{
	//	StatusCode: r.StatusCode,
	//	StatusMsg:  r.StatusMsg,
	//	VideoList:  videoList,
	//}
	logger.Debug(resp)
	c.JSON(consts.StatusOK, &resp)
}
